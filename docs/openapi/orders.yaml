openapi: 3.0.3
info:
  title: Restaurant Orders API
  description: API-only ordering module for restaurant management
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server

paths:
  /cart:
    get:
      summary: Get current cart
      description: Retrieve the current user's or session's cart with all items and totals
      tags:
        - Cart
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data:
                  cart:
                    id: 1
                    items:
                      - id: 1
                        menu_item:
                          id: 5
                          name: Classic Burger
                          price: 12.99
                        quantity: 2
                        price_snapshot: 12.99
                        special_instructions: No onions
                        subtotal: 25.98
                    totals:
                      subtotal: 25.98
                      tax: 2.08
                      total: 28.06
                meta:
                  trace_id: 550e8400-e29b-41d4-a716-446655440000

  /cart/items:
    post:
      summary: Add item to cart
      description: Add a menu item to the cart with specified quantity
      tags:
        - Cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemRequest'
            example:
              menu_item_id: 5
              quantity: 2
              special_instructions: No onions
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                title: Validation Error
                detail: Menu item is not available
                status: 422
                trace_id: 550e8400-e29b-41d4-a716-446655440000

  /cart/items/{cartItemId}:
    patch:
      summary: Update cart item
      description: Update quantity or special instructions for a cart item
      tags:
        - Cart
      parameters:
        - name: cartItemId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
            example:
              quantity: 3
              special_instructions: Extra cheese
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Remove cart item
      description: Remove an item from the cart
      tags:
        - Cart
      parameters:
        - name: cartItemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cart item removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                  meta:
                    $ref: '#/components/schemas/Meta'

  /checkout:
    post:
      summary: Checkout and create order
      description: Convert cart to order with customer information
      tags:
        - Checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
            example:
              customer_name: John Doe
              customer_email: john@example.com
              customer_phone: '+1-555-1234'
              pickup_time: '2025-10-03T18:00:00Z'
              special_instructions: Ring doorbell
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                empty_cart:
                  value:
                    title: Validation Error
                    detail: Cart is empty
                    status: 422
                    trace_id: 550e8400-e29b-41d4-a716-446655440000

  /orders:
    get:
      summary: List user's orders
      description: List all orders for authenticated user with optional filtering
      tags:
        - Orders
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, paid, in_prep, ready, completed, cancelled, failed]
        - name: sort
          in: query
          schema:
            type: string
            default: created_at
        - name: per_page
          in: query
          schema:
            type: integer
            default: 15
            maximum: 100
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '401':
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      summary: Get order details
      description: Retrieve detailed information about a specific order
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/pay:
    post:
      summary: Process payment for order
      description: Process payment for a pending order (stub implementation)
      tags:
        - Payments
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
        - name: Idempotency-Key
          in: header
          required: true
          schema:
            type: string
            format: uuid
          description: Unique key to ensure idempotent payment processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessPaymentRequest'
            example:
              amount: 28.06
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAttemptResponse'
        '402':
          description: Payment failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAttemptResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_idempotency_key:
                  value:
                    title: Validation Error
                    detail: Idempotency-Key header is required
                    status: 422
                    trace_id: 550e8400-e29b-41d4-a716-446655440000

  /orders/{orderId}/status:
    patch:
      summary: Update order status
      description: Update the status of an order
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
            example:
              status: in_prep
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      order:
                        type: object
                        properties:
                          id:
                            type: integer
                          order_number:
                            type: string
                          status:
                            type: string
                          updated_at:
                            type: string
                            format: date-time
                  meta:
                    $ref: '#/components/schemas/Meta'
        '422':
          description: Validation error (invalid transition)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Meta:
      type: object
      properties:
        trace_id:
          type: string
          format: uuid

    ErrorResponse:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        status:
          type: integer
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        trace_id:
          type: string
          format: uuid

    CartResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            cart:
              $ref: '#/components/schemas/Cart'
        meta:
          $ref: '#/components/schemas/Meta'

    Cart:
      type: object
      properties:
        id:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totals:
          $ref: '#/components/schemas/CartTotals'

    CartItem:
      type: object
      properties:
        id:
          type: integer
        menu_item:
          $ref: '#/components/schemas/MenuItemSummary'
        quantity:
          type: integer
          minimum: 1
          maximum: 99
        price_snapshot:
          type: number
          format: decimal
        special_instructions:
          type: string
          nullable: true
        subtotal:
          type: number
          format: decimal

    MenuItemSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
          format: decimal

    CartTotals:
      type: object
      properties:
        subtotal:
          type: number
          format: decimal
        tax:
          type: number
          format: decimal
        total:
          type: number
          format: decimal

    CartItemResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            cart_item:
              $ref: '#/components/schemas/CartItem'
        meta:
          $ref: '#/components/schemas/Meta'

    AddCartItemRequest:
      type: object
      required:
        - menu_item_id
        - quantity
      properties:
        menu_item_id:
          type: integer
        quantity:
          type: integer
          minimum: 1
          maximum: 99
        special_instructions:
          type: string
          maxLength: 500

    UpdateCartItemRequest:
      type: object
      properties:
        quantity:
          type: integer
          minimum: 1
          maximum: 99
        special_instructions:
          type: string
          maxLength: 500

    CheckoutRequest:
      type: object
      required:
        - customer_name
        - customer_email
        - customer_phone
      properties:
        customer_name:
          type: string
          maxLength: 255
        customer_email:
          type: string
          format: email
          maxLength: 255
        customer_phone:
          type: string
          maxLength: 20
        pickup_time:
          type: string
          format: date-time
        delivery_address:
          type: string
          maxLength: 500
        special_instructions:
          type: string
          maxLength: 1000

    OrderResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            order:
              $ref: '#/components/schemas/Order'
        meta:
          $ref: '#/components/schemas/Meta'

    Order:
      type: object
      properties:
        id:
          type: integer
        order_number:
          type: string
        status:
          type: string
          enum: [pending, paid, in_prep, ready, completed, cancelled, failed]
        subtotal:
          type: number
          format: decimal
        tax:
          type: number
          format: decimal
        total:
          type: number
          format: decimal
        customer_name:
          type: string
        customer_email:
          type: string
          format: email
        customer_phone:
          type: string
        pickup_time:
          type: string
          format: date-time
          nullable: true
        delivery_address:
          type: string
          nullable: true
        special_instructions:
          type: string
          nullable: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        payment_attempts:
          type: array
          items:
            $ref: '#/components/schemas/PaymentAttempt'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        menu_item:
          $ref: '#/components/schemas/MenuItemSummary'
        quantity:
          type: integer
        price_snapshot:
          type: number
          format: decimal
        special_instructions:
          type: string
          nullable: true

    OrderListResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            orders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
        meta:
          type: object
          properties:
            current_page:
              type: integer
            per_page:
              type: integer
            total:
              type: integer
            last_page:
              type: integer
            trace_id:
              type: string
              format: uuid

    ProcessPaymentRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: decimal
          minimum: 0.01
        payment_method:
          type: string
          maxLength: 50

    PaymentAttempt:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
          format: decimal
        status:
          type: string
          enum: [pending, success, failed]
        provider_reference:
          type: string
        error_message:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    PaymentAttemptResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            payment_attempt:
              $ref: '#/components/schemas/PaymentAttempt'
        meta:
          type: object
          properties:
            idempotent:
              type: boolean
            trace_id:
              type: string
              format: uuid

    UpdateOrderStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [pending, paid, in_prep, ready, completed, cancelled, failed]

tags:
  - name: Cart
    description: Shopping cart operations
  - name: Checkout
    description: Checkout and order creation
  - name: Orders
    description: Order management
  - name: Payments
    description: Payment processing
